# Generated by Django 2.1.2 on 2019-04-08 00:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DwellingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ADU_1BR', 'Accessory Dwelling Unit 1 Bedroom, Units'), ('ADU_2BR', 'Accessory Dwelling Unit 2 Bedroom, Units'), ('ADU_3BR', 'Accessory Dwelling Unit 3+ Bedroom, Units'), ('ADU_STUDIO', 'Accessory Dwelling Unit Studio, Units'), ('BR_1', '1 Bedroom, Units'), ('BR_2', '2 Bedroom, Units'), ('BR_3', '3+ Bedroom, Units'), ('GH_BEDS', 'Group Housing, Beds'), ('GH_ROOMS', 'Group Housing, Rooms'), ('MICRO', 'Micro, Units'), ('SRO', 'SRO, Units'), ('STUDIO', 'Studios, Units')], max_length=50)),
                ('exist', models.DecimalField(decimal_places=2, help_text='Existing amount', max_digits=15)),
                ('proposed', models.DecimalField(decimal_places=2, help_text='Proposed amount', max_digits=15)),
                ('net', models.DecimalField(decimal_places=2, help_text='Net change', max_digits=15)),
                ('area', models.DecimalField(blank=True, decimal_places=2, help_text='Area (optional)', max_digits=15)),
            ],
        ),
        migrations.CreateModel(
            name='LandUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('RC', 'Retail/Commercial (sq ft)'), ('RESIDENTIAL', 'Residential (sq ft)'), ('CIE', 'CIE (Cultural, Institutional, Educational)'), ('PDR', 'Industrial-PDR (sq ft)'), ('OFFICE', 'Office (sq ft)'), ('MEDICAL', 'Medical (sq ft)'), ('VISITOR', 'Visitor (sq ft)'), ('PARKING_SPACES', 'Parking Spaces (sq ft)')], max_length=20)),
                ('exist', models.DecimalField(decimal_places=2, help_text='Existing amount', max_digits=15)),
                ('proposed', models.DecimalField(decimal_places=2, help_text='Proposed amount', max_digits=15)),
                ('net', models.DecimalField(decimal_places=2, help_text='Net change', max_digits=15)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('the_geom', models.TextField(help_text='Polygon defining the parcel.')),
                ('shape_length', models.DecimalField(decimal_places=2, help_text='Perimeter of polygon', max_digits=15)),
                ('shape_area', models.DecimalField(decimal_places=2, help_text='Area of polygon', max_digits=15)),
                ('address', models.CharField(help_text='An address for this location. The format of these is extremely inconsistent, and sometimes a single parcel actually has two addresses.', max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Planner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('str_id', models.CharField(help_text='ID of planner as provided in original data. Looks like a user login id', max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ADDITIONS', 'Additions'), ('ADU', 'Accessory Dwelling Unit'), ('AFFORDABLE_UNITS', '100% Affordable Housing'), ('CHANGE_OF_USE', 'Change of Use'), ('DEMOLITION', 'Demolition'), ('ENVIRONMENTAL_REVIEW_TYPE', 'Environmental Review'), ('FACADE_ALT', 'Facade Alterations'), ('FINANCIAL', 'Financial Services'), ('FORMULA_RETAIL', 'Formula Retail'), ('INCLUSIONARY', 'Inclusionary Housing Required'), ('LEG_ZONE_CHANGE', 'Legislative/Zoning Change'), ('LOT_LINE_ADJUST', 'Lot Line Adjustment-Subdivision'), ('MASSAGE', 'Massage Establishment'), ('MCD', 'Medical Cannabis Dispensary'), ('MCD_REFERRAL', 'Public Health Review - MCD'), ('NEW_CONSTRUCTION', 'New Construction'), ('OTHER_NON_RES', 'Non-Residential Use Type - Other'), ('OTHER_PRJ_DESC', 'Other'), ('ROW_IMPROVE', 'ROW Improvements'), ('SENIOR', 'Senior Housing'), ('SPECIAL_NEEDS', 'Special Needs Housing'), ('STATE_DENSITY_BONUS', 'State Density Bonus'), ('STUDENT', 'Student Housing'), ('TOBACCO', 'Tobacco Paraphernalia Est')], max_length=50)),
                ('mcd_type', models.CharField(choices=[('MCD_BAR', 'Bar'), ('MCD_GEN_SPEC_GROCERY', 'General/Specialty Grocery'), ('MCD_LIMITED_RESTAURANT', 'Limited-Restaurant'), ('MCD_MASSAGE', 'Massage Establishment'), ('MCD_MEDICAL_CANNABIS', 'Medical Cannabis Dispensary'), ('MCD_RESTAURANT', 'Restaurant'), ('MCD_TOBACCO', 'Tobacco Paraphernalia')], max_length=50, null=True)),
                ('env_type', models.CharField(choices=[('ENV_CEQA', 'Other CEQA Guidelines Section'), ('ENV_COMMUNITY_PLAN_DET', 'Community Plan-Determination'), ('ENV_COMMUNITY_PLAN_EXEMPT', 'Community Plan-Exemption/Exclusion'), ('ENV_COMMUNITY_PLAN_STUDY', 'Community Plan-Initial Study/Environmental Evaluation'), ('ENV_EIR_ADDENDUM', 'EIR Addendum'), ('ENV_EIR', 'Environmental Impact Report'), ('ENV_EIR_SUPPLEMENTAL', 'EIR Supplemental'), ('ENV_EXEMPT_CERT', 'Categorical Exemption-Certificate'), ('ENV_EXEMPT_CLASS_32', 'Categorical Exemption-Class 32'), ('ENV_EXEMPT_HISTORIC_IMPACT', 'Categorical Exemption-Determination of Historic Resource Impact'), ('ENV_EXEMPT_HISTORIC_RESOURCE', 'Categorical Exemption-Determination of Historic Resource'), ('ENV_EXEMPT_STAMP', 'Categorical Exemption-Stamp'), ('ENV_GEN_RULE_EXCLUSION', 'General Rule Exclusion'), ('ENV_INIT_STUDY_EIR', 'Initial Study-Environmental Impact Report'), ('ENV_INIT_STUDY', 'Initial Study'), ('ENV_INIT_STUDY_NEGATIVE_DEC', 'Initial Study-Negative Declaration'), ('ENV_NEG_DEC_ADDENDUM', 'Negative Declaration Addendum'), ('ENV_NOTE', 'Note to File'), ('ENV_PUBLIC_PROJECT_EXEMPT', 'Public Project Exemption'), ('ENV_REVIEW_EXEMPTION_OTHER_AGENCY', 'Review-Exemption Prepared by Another Agency'), ('ENV_TRANSPO_REVIEW', 'Transportation Review-Abbreviated')], max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('AFFORDABLE', 'Dwelling Units-Affordable, Units'), ('HOTEL_ROOMS', 'Hotel Rooms'), ('MARKET_RATE', 'Dwelling Units-Market Rate, Units'), ('BUILD', 'Building Number'), ('STORIES', 'Stories Number'), ('PARKING', 'Parking Spaces'), ('LOADING', 'Loading Spaces'), ('BIKE', 'Bicycle Spaces'), ('CAR_SHARE', 'Car Share Spaces'), ('USABLE', 'Usable Open Spaces'), ('PUBLIC', 'Public Open Space'), ('ART', 'Public Art'), ('ROOF', 'Better Roof - Total Roof Area'), ('SOLAR', 'Better Roof - Solar Area'), ('LIVING', 'Better Roof - Living Roof Area'), ('OTHER', 'Other Project Feature')], max_length=50)),
                ('other_name', models.CharField(blank=True, help_text='The "other" project type has a manually-input name.', max_length=250)),
                ('exist', models.DecimalField(decimal_places=2, help_text='Existing amount', max_digits=15)),
                ('proposed', models.DecimalField(decimal_places=2, help_text='Proposed amount', max_digits=15)),
                ('net', models.DecimalField(decimal_places=2, help_text='Net change', max_digits=15)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_id', models.CharField(help_text='Planning Department unique identifier for the record', max_length=100)),
                ('object_id', models.IntegerField(help_text='Esri ArcGIS system ID')),
                ('template_id', models.CharField(help_text='Unique system identifier for the record', max_length=100)),
                ('name', models.CharField(help_text='Title of record as provided haphazardly by applicant', max_length=100)),
                ('description', models.TextField(help_text='Long description of record as provided haphazardly by applicant')),
                ('status', models.CharField(help_text='Current status (e.g. open, closed, accepted, rejected)', max_length=100)),
                ('construct_cost', models.FloatField(help_text='Estimated construction cost in dollars of the project')),
                ('acalink', models.TextField(help_text='Link to this record in Accela Citizen Access')),
                ('aalink', models.TextField(help_text='Link to this record in Accela Automation')),
                ('date_opened', models.DateField(verbose_name='Date record was opened')),
                ('date_closed', models.DateField(verbose_name='Date record was closed')),
                ('related_building_permit', models.CharField(help_text='Related Building Permit Number', max_length=100)),
                ('bos_1st_read', models.DateField(help_text='Full Board Hearing Date, First')),
                ('bos_2nd_read', models.DateField(help_text='Full Board Hearing Date, Second')),
                ('com_hearing', models.DateField(help_text='Committee Hearing Date')),
                ('mayoral_sign', models.DateField(help_text='Mayoral Action - Ordinance Signed Date')),
                ('transmit_date_bos', models.DateField(help_text='Materials Hearing to BOS Clerk Date')),
                ('com_hearing_date_bos', models.DateField(help_text='Committee Hearing Date - BOS Review')),
                ('dwelling_type', models.ManyToManyField(help_text='Dwelling type of project', to='ppts.DwellingType')),
                ('land_use', models.ManyToManyField(help_text='Land use type of project', to='ppts.LandUse')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ppts.Location')),
                ('parent', models.OneToOneField(help_text='The parent/child relationship for related records.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child', to='ppts.Record')),
                ('planner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ppts.Planner')),
                ('project_description', models.ManyToManyField(help_text='Type of project', to='ppts.ProjectDescription')),
            ],
        ),
        migrations.CreateModel(
            name='RecordType',
            fields=[
                ('name', models.CharField(help_text='Expansion of the 3-letter acronym (e.g. PRJ, PRL, ENV). There are 63 types.', max_length=100, primary_key=True, serialize=False)),
                ('subtype', models.CharField(help_text='One of 17 subcategories of records (e.g. Environmental, Referrals, Legislation)', max_length=100)),
                ('type', models.CharField(help_text='One of 5 categories of records (e.g. Applications, Projects)', max_length=100)),
                ('group', models.CharField(help_text='In this data, always "planning", but hypothetically we could add data from other departments to the database', max_length=100)),
                ('module', models.CharField(help_text='City department that owns the record. In this data, always "planning".', max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='record',
            name='record_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ppts.RecordType'),
        ),
    ]
